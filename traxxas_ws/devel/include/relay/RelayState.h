// Generated by gencpp from file relay/RelayState.msg
// DO NOT EDIT!


#ifndef RELAY_MESSAGE_RELAYSTATE_H
#define RELAY_MESSAGE_RELAYSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace relay
{
template <class ContainerAllocator>
struct RelayState_
{
  typedef RelayState_<ContainerAllocator> Type;

  RelayState_()
    : control_mode(0)
    , is_emergency(false)  {
    }
  RelayState_(const ContainerAllocator& _alloc)
    : control_mode(0)
    , is_emergency(false)  {
  (void)_alloc;
    }



   typedef int8_t _control_mode_type;
  _control_mode_type control_mode;

   typedef uint8_t _is_emergency_type;
  _is_emergency_type is_emergency;





  typedef boost::shared_ptr< ::relay::RelayState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::relay::RelayState_<ContainerAllocator> const> ConstPtr;

}; // struct RelayState_

typedef ::relay::RelayState_<std::allocator<void> > RelayState;

typedef boost::shared_ptr< ::relay::RelayState > RelayStatePtr;
typedef boost::shared_ptr< ::relay::RelayState const> RelayStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::relay::RelayState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::relay::RelayState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::relay::RelayState_<ContainerAllocator1> & lhs, const ::relay::RelayState_<ContainerAllocator2> & rhs)
{
  return lhs.control_mode == rhs.control_mode &&
    lhs.is_emergency == rhs.is_emergency;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::relay::RelayState_<ContainerAllocator1> & lhs, const ::relay::RelayState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace relay

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::relay::RelayState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::relay::RelayState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::relay::RelayState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::relay::RelayState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::relay::RelayState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::relay::RelayState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::relay::RelayState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d728a4fc76a5171e38c2c4900549dece";
  }

  static const char* value(const ::relay::RelayState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd728a4fc76a5171eULL;
  static const uint64_t static_value2 = 0x38c2c4900549deceULL;
};

template<class ContainerAllocator>
struct DataType< ::relay::RelayState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "relay/RelayState";
  }

  static const char* value(const ::relay::RelayState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::relay::RelayState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#0 for manual 1 for auto mode\n"
"int8 control_mode\n"
"bool is_emergency\n"
;
  }

  static const char* value(const ::relay::RelayState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::relay::RelayState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_mode);
      stream.next(m.is_emergency);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RelayState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::relay::RelayState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::relay::RelayState_<ContainerAllocator>& v)
  {
    s << indent << "control_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "is_emergency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_emergency);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RELAY_MESSAGE_RELAYSTATE_H
