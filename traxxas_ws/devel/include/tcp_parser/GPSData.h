// Generated by gencpp from file tcp_parser/GPSData.msg
// DO NOT EDIT!


#ifndef TCP_PARSER_MESSAGE_GPSDATA_H
#define TCP_PARSER_MESSAGE_GPSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tcp_parser
{
template <class ContainerAllocator>
struct GPSData_
{
  typedef GPSData_<ContainerAllocator> Type;

  GPSData_()
    : latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , fix_type(0)
    , num_satellites(0)
    , sdn(0.0)
    , sde(0.0)
    , sdu(0.0)
    , sdne(0.0)
    , sdeu(0.0)
    , sdun(0.0)  {
    }
  GPSData_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , fix_type(0)
    , num_satellites(0)
    , sdn(0.0)
    , sde(0.0)
    , sdu(0.0)
    , sdne(0.0)
    , sdeu(0.0)
    , sdun(0.0)  {
  (void)_alloc;
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _height_type;
  _height_type height;

   typedef int8_t _fix_type_type;
  _fix_type_type fix_type;

   typedef int16_t _num_satellites_type;
  _num_satellites_type num_satellites;

   typedef double _sdn_type;
  _sdn_type sdn;

   typedef double _sde_type;
  _sde_type sde;

   typedef double _sdu_type;
  _sdu_type sdu;

   typedef double _sdne_type;
  _sdne_type sdne;

   typedef double _sdeu_type;
  _sdeu_type sdeu;

   typedef double _sdun_type;
  _sdun_type sdun;





  typedef boost::shared_ptr< ::tcp_parser::GPSData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tcp_parser::GPSData_<ContainerAllocator> const> ConstPtr;

}; // struct GPSData_

typedef ::tcp_parser::GPSData_<std::allocator<void> > GPSData;

typedef boost::shared_ptr< ::tcp_parser::GPSData > GPSDataPtr;
typedef boost::shared_ptr< ::tcp_parser::GPSData const> GPSDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tcp_parser::GPSData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tcp_parser::GPSData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tcp_parser::GPSData_<ContainerAllocator1> & lhs, const ::tcp_parser::GPSData_<ContainerAllocator2> & rhs)
{
  return lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.height == rhs.height &&
    lhs.fix_type == rhs.fix_type &&
    lhs.num_satellites == rhs.num_satellites &&
    lhs.sdn == rhs.sdn &&
    lhs.sde == rhs.sde &&
    lhs.sdu == rhs.sdu &&
    lhs.sdne == rhs.sdne &&
    lhs.sdeu == rhs.sdeu &&
    lhs.sdun == rhs.sdun;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tcp_parser::GPSData_<ContainerAllocator1> & lhs, const ::tcp_parser::GPSData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tcp_parser

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tcp_parser::GPSData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tcp_parser::GPSData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tcp_parser::GPSData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tcp_parser::GPSData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tcp_parser::GPSData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tcp_parser::GPSData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tcp_parser::GPSData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86b1eb9857008b5f82c5d04d35566ae5";
  }

  static const char* value(const ::tcp_parser::GPSData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86b1eb9857008b5fULL;
  static const uint64_t static_value2 = 0x82c5d04d35566ae5ULL;
};

template<class ContainerAllocator>
struct DataType< ::tcp_parser::GPSData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tcp_parser/GPSData";
  }

  static const char* value(const ::tcp_parser::GPSData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tcp_parser::GPSData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 latitude\n"
"float64 longitude\n"
"float64 height\n"
"\n"
"#1=fix; 2=float; 3=sbas; 4=dgps; 5=single; 6=ppp\n"
"int8 fix_type\n"
"int16 num_satellites\n"
"\n"
"float64 sdn\n"
"float64 sde\n"
"float64 sdu\n"
"float64 sdne\n"
"float64 sdeu\n"
"float64 sdun\n"
;
  }

  static const char* value(const ::tcp_parser::GPSData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tcp_parser::GPSData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.height);
      stream.next(m.fix_type);
      stream.next(m.num_satellites);
      stream.next(m.sdn);
      stream.next(m.sde);
      stream.next(m.sdu);
      stream.next(m.sdne);
      stream.next(m.sdeu);
      stream.next(m.sdun);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPSData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tcp_parser::GPSData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tcp_parser::GPSData_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "fix_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fix_type);
    s << indent << "num_satellites: ";
    Printer<int16_t>::stream(s, indent + "  ", v.num_satellites);
    s << indent << "sdn: ";
    Printer<double>::stream(s, indent + "  ", v.sdn);
    s << indent << "sde: ";
    Printer<double>::stream(s, indent + "  ", v.sde);
    s << indent << "sdu: ";
    Printer<double>::stream(s, indent + "  ", v.sdu);
    s << indent << "sdne: ";
    Printer<double>::stream(s, indent + "  ", v.sdne);
    s << indent << "sdeu: ";
    Printer<double>::stream(s, indent + "  ", v.sdeu);
    s << indent << "sdun: ";
    Printer<double>::stream(s, indent + "  ", v.sdun);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TCP_PARSER_MESSAGE_GPSDATA_H
