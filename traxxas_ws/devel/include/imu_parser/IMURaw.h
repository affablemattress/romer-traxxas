// Generated by gencpp from file imu_parser/IMURaw.msg
// DO NOT EDIT!


#ifndef IMU_PARSER_MESSAGE_IMURAW_H
#define IMU_PARSER_MESSAGE_IMURAW_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace imu_parser
{
template <class ContainerAllocator>
struct IMURaw_
{
  typedef IMURaw_<ContainerAllocator> Type;

  IMURaw_()
    : heading(0.0)  {
    }
  IMURaw_(const ContainerAllocator& _alloc)
    : heading(0.0)  {
  (void)_alloc;
    }



   typedef float _heading_type;
  _heading_type heading;





  typedef boost::shared_ptr< ::imu_parser::IMURaw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu_parser::IMURaw_<ContainerAllocator> const> ConstPtr;

}; // struct IMURaw_

typedef ::imu_parser::IMURaw_<std::allocator<void> > IMURaw;

typedef boost::shared_ptr< ::imu_parser::IMURaw > IMURawPtr;
typedef boost::shared_ptr< ::imu_parser::IMURaw const> IMURawConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imu_parser::IMURaw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imu_parser::IMURaw_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imu_parser::IMURaw_<ContainerAllocator1> & lhs, const ::imu_parser::IMURaw_<ContainerAllocator2> & rhs)
{
  return lhs.heading == rhs.heading;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imu_parser::IMURaw_<ContainerAllocator1> & lhs, const ::imu_parser::IMURaw_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imu_parser

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::imu_parser::IMURaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_parser::IMURaw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu_parser::IMURaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu_parser::IMURaw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_parser::IMURaw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_parser::IMURaw_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imu_parser::IMURaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22eeef76ab4645786a2d92bcfbc4c574";
  }

  static const char* value(const ::imu_parser::IMURaw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22eeef76ab464578ULL;
  static const uint64_t static_value2 = 0x6a2d92bcfbc4c574ULL;
};

template<class ContainerAllocator>
struct DataType< ::imu_parser::IMURaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu_parser/IMURaw";
  }

  static const char* value(const ::imu_parser::IMURaw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imu_parser::IMURaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 heading\n"
;
  }

  static const char* value(const ::imu_parser::IMURaw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imu_parser::IMURaw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMURaw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu_parser::IMURaw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imu_parser::IMURaw_<ContainerAllocator>& v)
  {
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMU_PARSER_MESSAGE_IMURAW_H
